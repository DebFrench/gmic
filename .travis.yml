# This is the http://travis-ci.org configuration file for G'MIC
env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "Off2w7QqHIO2lCZTD64VYKSiIe8scMKgKrlIJXIL7TBkRKoE9mVB+uFtZG53q+IZPICHpB37/5tUBLFw6LUAq7kCv+Hwr67g/CZ6BtO8l25gy0DjrHH3J51NDDMsJsZbISSe+46IAxP0JXOhCP2Xjsx02E05C/62QX9mAfXtdxqLU7nG/vYalfGLZpt3Fg6Q1UYbCdshQXysHWVktQzf3UWh0Aur3qbdfoUhfuCb7Do0BFZONo8PM5Epb5aIOb2hp5ghNKPliiTVA12E3jGt5uAJMXtg1WJg740EvIHPCYdWORmYMLQY0xc07lj0vgXp+1sKn7KD4ndZF55ur4x0U/4LklaO3QPVYXjBsve9WY/IYF2Fl1NZk+KOo7QWNtwWmJHFcdqnE91xaYxLFMoOTvmpz7QvFofJXeqBp/tvBAfPDRIyY90aBJbfyGge90nylbcjNxPRkyrPXXKU5yh+oBFX5J1x9EvFIYFjLqRhZw+Sauji7GmRH/xHWqr8mRxNyjDAbZX1VwE7akIVLMWnoxXCPMzMkB7dlbhwdLxyn2lAuxbXsdKdTZU7pAuzaMvldZfdBElRioCGeTwyCAZ8iwdmbKzLDzJMcSLGRGGjOreOxHtIj00cRj/nDCN0g9xJJxFeiGWivJ4iLKWKsbsyz+g/QIP196jeldUo+dghOV0="
   # Coverity run condition (avoid matrix multiple runs), need customized
   # build script. Need an update if new matrix cases.
   - coverity_scan_run_condition='"$CC" = gcc -a "$TRAVIS_OS_NAME" != osx'
   # Coverity script test mode (if true no uploading, avoid reaching the quota)
   # usual processing: false.
   - coverity_scan_script_test_mode=false

os:
  - linux
  - osx

language: cpp

compiler:
  - gcc
  - clang

addons:
  apt:
    sources:
    # Natron requires boost >= 1.49 to compile in C++11 mode
    # see http://stackoverflow.com/questions/11302758/error-while-copy-constructing-boostshared-ptr-using-c11
    # we use the irie/boost ppa for that purpose
    - irie-boost
    # the PPA xorg-edgers contains cairo 1.12 (required for rotoscoping)
    - xorg-edgers-ppa
    # ubuntu-toolchain-r/test contains recent versions of gcc
    - ubuntu-toolchain-r-test
    packages:
    - libcv-dev
    - libcvaux-dev
    - libhighgui-dev
    - libopencv-dev
    - libfftw3-dev
    - zlib1g-dev
    - libpng-dev
    - libjpeg-dev
    - libtiff-dev
    - libcurl4-openssl-dev
    - libgimp2.0-dev
    - libqt4-dev

matrix:
  exclude:
    - os: osx
      compiler: gcc
  fast_finish: true

# Travis CI has 1.5 cores per VM, take advantage of it
#env:
#  - MAKEFLAGS="-j 2"

# linux: opencv is in kubuntu-ppa/backports
# osx: opencv is in homebrew/science
before_install:
  - date -u
  - uname -a
  - make -C src CImg.h gmic_stdlib.h 
  - if [ -z "$TRAVIS_OS_NAME" -o "$TRAVIS_OS_NAME" = "linux" ]; then
        sudo add-apt-repository -y ppa:kubuntu-ppa/backports;
        sudo apt-get update;
    fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
        brew tap homebrew/science
        brew update;
        brew upgrade;
    fi

install:
  - if [ -z "$TRAVIS_OS_NAME" -o "$TRAVIS_OS_NAME" = "linux" ]; then
        sudo apt-get install libcv-dev libcvaux-dev libhighgui-dev libopencv-dev libfftw3-dev zlib1g-dev libpng-dev libjpeg-dev libtiff-dev libcurl4-openssl-dev libx11-dev libgimp2.0-dev libqt4-dev;
    fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
        brew install opencv fftw libpng jpeg libtiff curl qt;
    fi

# don't build the gimp plugin (requires a recent gimp version)
script:
  - if [[ ${COVERITY_SCAN_BRANCH} == 1 ]];
    then
      echo "Don't build on coverty_scan branch.";
      exit 0;
    fi
  - if [ "$CC" = "gcc" ]; then
        make -C src NO_SRIPDLIB=1 CC="${CXX}" cli lib zart;
    else
        make -C src NO_SRIPDLIB=1 CC="${CXX}" OPENMP_CFLAGS="" OPENMP_LIBS="" cli lib zart;
    fi

addons:
  coverity_scan:
    # customized build script URL
    # TRAVIS_REPO_SLUG: owner_name/repo_name of repository currently being built
    # TRAVIS_BRANCH: name of the branch currently being built
    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh
    # project metadata
    project:
      name: $TRAVIS_REPO_SLUG
    # Where email notification of build analysis results will be sent
    notification_email: frederic.devernay@m4x.org
    # Commands to prepare for build_command
    #build_command_prepend: ./configure
    # This command will be added as an argument to "cov-build" to compile
    # the project for analysis
    build_command: "make -C src NO_SRIPDLIB=1 cli lib zart"
    # Pattern to match selecting branches that will run analysis
    branch_pattern: coverity_scan
